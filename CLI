//
//  main.cpp
//  COEN346 CLI
//
//  Created by Rohit Vaidya on 2022-01-26.
//

#include <iostream>
#include <stdio.h>
#include <string>
#include <unistd.h>
#include <fstream>
#include <thread>

//Multiple file paths not yet included, Only single file path works
//Store executable output in file not done

using namespace std;

string username = "";
string hostname = "";
string path = "";

void newFileCreation(string command,string echoCommand){
    
    cout<<"Create called"<<endl;
    //find start of file name
    long pos = command.find_last_of(">");
    string fileName = command.substr(pos+1);
    fstream file;
    file.open(fileName.c_str(),ios::out);
    if(!file){
        cout<<"File was not created"<<endl;
    }
    else{
        file<<echoCommand<<"\n";
        file.close();
    }

}

void appendFile(string command,string echoCommand){
    
    //find start of file name
    cout<<"Append called"<<endl;
    long pos = command.find_last_of(">");
    string fileName = command.substr(pos+1);
    fstream file;
    file.open(fileName.c_str(),ios::app);
    if(file){
        file<<echoCommand;
    }
    
}

int appendInfo(string command){
    
    char ch[command.length()];
    strcpy(ch,command.c_str());
    // Check if output needs to be appended to a file
    long appendCheck = command.find_last_of(">");
    
    //check if '>' is preceeded by '>'
    if(ch[appendCheck-1]=='>' & ch[appendCheck-2]=='-')
        return 0;
    
    // Check if output needs to be redirected to a file
    else if(ch[appendCheck-1]=='-')
        return 1;
    else
        return 2;
}

void threadTesting(string s){
    
    string filepath = path + s;
    FILE* pipe = popen(filepath.c_str(),"r");
    pclose(pipe);
    filepath = path;
    
}

//Update as necessary
void filePathThread(string filepath, int appendType){
    
    char buff[128];
    string result = "";
    FILE* pipe = popen(filepath.c_str(),"r");
    
    while (!feof(pipe)) {
            
        if (fgets(buff, 128, pipe) != NULL) {
                result += buff;
            }
    }
    
    if(appendType == 0)
        appendFile(filepath, result);
    else if(appendType == 1)
        newFileCreation(filepath, result);
    pclose(pipe);

}

void startUp(){
    fstream myFile;
    string startup = "coen346UserInfo.txt";
    myFile.open(startup.c_str(),ios::in);
    
    if(!myFile){
        cout<<"User Info File does not exist"<<endl;
    }
    else{
        string line;
        while(1){
            //read each line from the input file
            for(int i=0; std::getline(myFile,line);i++){
                if(i==0){
                    username += line;
                    line = "";
                }
                if(i==1){
                    hostname += line;
                    line = "";
                }
                if(i==2){
                    path += line;
                    line = "";
                }
            }
                
            if(myFile.eof())
                break;

        }

    }
    
    //Make sure path variable stores only actual file paths
    path = path.substr(path.find_first_of('=')+1);
    myFile.close();
}

void readCommand(string command){
    
    string commandWord;
    string echoValue = "";
    char ch[command.length()];
    int appendType = 2;
    
    strcpy(ch,command.c_str());
    commandWord = command.substr(0,command.find_first_of(" "));
    
    appendType = appendInfo(command);
    
    if(commandWord == "echo"){
        
        long startOfText = command.find_first_of("\"");
        long endOfText = command.find_last_of("\"");
        long lengthOfText = endOfText-startOfText-1;

        echoValue = command.substr(startOfText+1,lengthOfText); //extract output string
        
        if(appendType == 0){
            appendFile(command,echoValue);
        }
        // Check if output needs to be redirected to a file
        else if(appendType == 1)
            newFileCreation(command,echoValue);
        else
            cout<<echoValue<<endl;

    }
    
    else if(command.find("/") == 0){
        thread th(filePathThread,command,appendType);
        th.join();
        
    }
}

int main() {
    
    string command = "";
    //Initialise user data from input file
    startUp();
    
    do{
        cout<<username<<"@"<<hostname<<"$"<<" ";
        getline(cin,command);
        readCommand(command);
        
    }while(command != "exit");
    
}


